CompUnits : CompUnit 
	CompUnit : FuncDef 
		FuncDef : Type IDENT "(" ")" Block 
			Type : "int" 
				"int" = "int"
			IDENT = "main"
			"(" = "("
			")" = ")"
			Block : "{" BlockItem BlockItem BlockItem BlockItem BlockItem BlockItem "}" 
				"{" = "{"
				BlockItem : Decl 
					Decl : VarDecl 
						VarDecl : Type VarDef "," VarDef ";" 
							Type : "int" 
								"int" = "int"
							VarDef : VarDefLeft 
								VarDefLeft : IDENT "[" ConstExp "]" 
									IDENT = "arr"
									"[" = "["
									ConstExp : Exp 
										Exp : LOrExp 
											LOrExp : LAndExp 
												LAndExp : EqExp 
													EqExp : RelExp 
														RelExp : AddExp 
															AddExp : MulExp 
																MulExp : UnaryExp 
																	UnaryExp : PrimaryExp 
																		PrimaryExp : Number 
																			Number : Integer 
																				Integer : DEC_INTEGER 
																					DEC_INTEGER = "10"
									"]" = "]"
							"," = ","
							VarDef : VarDefLeft "=" InitVal 
								VarDefLeft : IDENT 
									IDENT = "n"
								"=" = "="
								InitVal : Exp 
									Exp : LOrExp 
										LOrExp : LAndExp 
											LAndExp : EqExp 
												EqExp : RelExp 
													RelExp : AddExp 
														AddExp : MulExp 
															MulExp : UnaryExp 
																UnaryExp : IDENT "(" FuncRParams ")" 
																	IDENT = "getarray"
																	"(" = "("
																	FuncRParams : Exp 
																		Exp : LOrExp 
																			LOrExp : LAndExp 
																				LAndExp : EqExp 
																					EqExp : RelExp 
																						RelExp : AddExp 
																							AddExp : MulExp 
																								MulExp : UnaryExp 
																									UnaryExp : PrimaryExp 
																										PrimaryExp : LVal 
																											LVal : IDENT 
																												IDENT = "arr"
																	")" = ")"
							";" = ";"
				BlockItem : Decl 
					Decl : VarDecl 
						VarDecl : Type VarDef "," VarDef ";" 
							Type : "int" 
								"int" = "int"
							VarDef : VarDefLeft "=" InitVal 
								VarDefLeft : IDENT 
									IDENT = "i"
								"=" = "="
								InitVal : Exp 
									Exp : LOrExp 
										LOrExp : LAndExp 
											LAndExp : EqExp 
												EqExp : RelExp 
													RelExp : AddExp 
														AddExp : MulExp 
															MulExp : UnaryExp 
																UnaryExp : PrimaryExp 
																	PrimaryExp : Number 
																		Number : Integer 
																			Integer : OCT_INTEGER 
																				OCT_INTEGER = "0"
							"," = ","
							VarDef : VarDefLeft "=" InitVal 
								VarDefLeft : IDENT 
									IDENT = "sum"
								"=" = "="
								InitVal : Exp 
									Exp : LOrExp 
										LOrExp : LAndExp 
											LAndExp : EqExp 
												EqExp : RelExp 
													RelExp : AddExp 
														AddExp : MulExp 
															MulExp : UnaryExp 
																UnaryExp : PrimaryExp 
																	PrimaryExp : Number 
																		Number : Integer 
																			Integer : OCT_INTEGER 
																				OCT_INTEGER = "0"
							";" = ";"
				BlockItem : Stmt 
					Stmt : "while" "(" Exp ")" Stmt 
						"while" = "while"
						"(" = "("
						Exp : LOrExp 
							LOrExp : LAndExp 
								LAndExp : EqExp 
									EqExp : RelExp 
										RelExp : RelExp "<" AddExp 
											RelExp : AddExp 
												AddExp : MulExp 
													MulExp : UnaryExp 
														UnaryExp : PrimaryExp 
															PrimaryExp : LVal 
																LVal : IDENT 
																	IDENT = "i"
											"<" = "<"
											AddExp : MulExp 
												MulExp : UnaryExp 
													UnaryExp : PrimaryExp 
														PrimaryExp : LVal 
															LVal : IDENT 
																IDENT = "n"
						")" = ")"
						Stmt : NoIfStmt 
							NoIfStmt : Block 
								Block : "{" BlockItem BlockItem "}" 
									"{" = "{"
									BlockItem : Stmt 
										Stmt : NoIfStmt 
											NoIfStmt : LVal "=" Exp ";" 
												LVal : IDENT 
													IDENT = "sum"
												"=" = "="
												Exp : LOrExp 
													LOrExp : LAndExp 
														LAndExp : EqExp 
															EqExp : RelExp 
																RelExp : AddExp 
																	AddExp : AddExp "+" MulExp 
																		AddExp : MulExp 
																			MulExp : UnaryExp 
																				UnaryExp : PrimaryExp 
																					PrimaryExp : LVal 
																						LVal : IDENT 
																							IDENT = "sum"
																		"+" = "+"
																		MulExp : UnaryExp 
																			UnaryExp : PrimaryExp 
																				PrimaryExp : LVal 
																					LVal : IDENT "[" Exp "]" 
																						IDENT = "arr"
																						"[" = "["
																						Exp : LOrExp 
																							LOrExp : LAndExp 
																								LAndExp : EqExp 
																									EqExp : RelExp 
																										RelExp : AddExp 
																											AddExp : MulExp 
																												MulExp : UnaryExp 
																													UnaryExp : PrimaryExp 
																														PrimaryExp : LVal 
																															LVal : IDENT 
																																IDENT = "i"
																						"]" = "]"
												";" = ";"
									BlockItem : Stmt 
										Stmt : NoIfStmt 
											NoIfStmt : LVal "=" Exp ";" 
												LVal : IDENT 
													IDENT = "i"
												"=" = "="
												Exp : LOrExp 
													LOrExp : LAndExp 
														LAndExp : EqExp 
															EqExp : RelExp 
																RelExp : AddExp 
																	AddExp : AddExp "+" MulExp 
																		AddExp : MulExp 
																			MulExp : UnaryExp 
																				UnaryExp : PrimaryExp 
																					PrimaryExp : LVal 
																						LVal : IDENT 
																							IDENT = "i"
																		"+" = "+"
																		MulExp : UnaryExp 
																			UnaryExp : PrimaryExp 
																				PrimaryExp : Number 
																					Number : Integer 
																						Integer : DEC_INTEGER 
																							DEC_INTEGER = "1"
												";" = ";"
									"}" = "}"
				BlockItem : Stmt 
					Stmt : NoIfStmt 
						NoIfStmt : Exp ";" 
							Exp : LOrExp 
								LOrExp : LAndExp 
									LAndExp : EqExp 
										EqExp : RelExp 
											RelExp : AddExp 
												AddExp : MulExp 
													MulExp : UnaryExp 
														UnaryExp : IDENT "(" FuncRParams ")" 
															IDENT = "putint"
															"(" = "("
															FuncRParams : Exp 
																Exp : LOrExp 
																	LOrExp : LAndExp 
																		LAndExp : EqExp 
																			EqExp : RelExp 
																				RelExp : AddExp 
																					AddExp : MulExp 
																						MulExp : UnaryExp 
																							UnaryExp : PrimaryExp 
																								PrimaryExp : LVal 
																									LVal : IDENT 
																										IDENT = "sum"
															")" = ")"
							";" = ";"
				BlockItem : Stmt 
					Stmt : NoIfStmt 
						NoIfStmt : Exp ";" 
							Exp : LOrExp 
								LOrExp : LAndExp 
									LAndExp : EqExp 
										EqExp : RelExp 
											RelExp : AddExp 
												AddExp : MulExp 
													MulExp : UnaryExp 
														UnaryExp : IDENT "(" FuncRParams ")" 
															IDENT = "putch"
															"(" = "("
															FuncRParams : Exp 
																Exp : LOrExp 
																	LOrExp : LAndExp 
																		LAndExp : EqExp 
																			EqExp : RelExp 
																				RelExp : AddExp 
																					AddExp : MulExp 
																						MulExp : UnaryExp 
																							UnaryExp : PrimaryExp 
																								PrimaryExp : Number 
																									Number : Integer 
																										Integer : DEC_INTEGER 
																											DEC_INTEGER = "10"
															")" = ")"
							";" = ";"
				BlockItem : Stmt 
					Stmt : NoIfStmt 
						NoIfStmt : "return" Exp ";" 
							"return" = "return"
							Exp : LOrExp 
								LOrExp : LAndExp 
									LAndExp : EqExp 
										EqExp : RelExp 
											RelExp : AddExp 
												AddExp : MulExp 
													MulExp : UnaryExp 
														UnaryExp : PrimaryExp 
															PrimaryExp : Number 
																Number : Integer 
																	Integer : OCT_INTEGER 
																		OCT_INTEGER = "0"
							";" = ";"
				"}" = "}"
