	.data
	.text
	.global main
main:
	addi sp, sp, -48
main_entry:
#   @a = alloc i32
	addi t0, sp, 4
	sw t0, 32(sp)
#   store 1, @a
	lw t0, 32(sp)
	li t1, 1
	sw t1, 0(t0)
#   %0 = load @a
	lw t0, 32(sp)
	lw t0, 0(t0)
	sw t0, 28(sp)
#   %1 = eq %0, 2
	lw t1, 28(sp)
	addi t0, t1, -2
	seqz t0, t0
	sw t0, 24(sp)
#   %2 = load @a
	lw t0, 32(sp)
	lw t0, 0(t0)
	sw t0, 20(sp)
#   %3 = eq %2, 3
	lw t1, 20(sp)
	addi t0, t1, -3
	seqz t0, t0
	sw t0, 16(sp)
#   %4 = or %1, %3
	lw t1, 24(sp)
	lw t2, 16(sp)
	or t0, t1, t2
	sw t0, 12(sp)
#   br %4, %ifelse_if, %ifelse_else
	lw t0, 12(sp)
	bne t0, x0, main_ifelse_if
	jal x0, main_ifelse_else
main_ifelse_if:
#   jump %entry_0
	jal x0, main_entry_0
main_entry_0:
#   ret 0
	li a0, 0
	addi sp, sp, 48
	ret
#   jump %entry_1
	jal x0, main_entry_1
main_entry_1:
#   jump %ifelse_end
	jal x0, main_ifelse_end
main_ifelse_else:
#   jump %entry_2
	jal x0, main_entry_2
main_entry_2:
#   %5 = load @a
	lw t0, 32(sp)
	lw t0, 0(t0)
	sw t0, 8(sp)
#   %6 = add %5, 1
	lw t1, 8(sp)
	addi t0, t1, 1
	sw t0, 4(sp)
#   ret %6
	lw t0, 4(sp)
	addi a0, t0, 0
	addi sp, sp, 48
	ret
#   jump %entry_3
	jal x0, main_entry_3
main_entry_3:
#   jump %ifelse_end
	jal x0, main_ifelse_end
main_ifelse_end:

